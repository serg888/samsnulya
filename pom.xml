<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>ru.javawebinar</groupId>     <!-- наименование организации как в наименовании пакета (обычно сайт итд)-->
    <artifactId>first</artifactId>                    <!-- название проекта-->
    <packaging>war</packaging>                 <!-- тип файла создаваемого в результате сборке (war, jar, pom, ear)-->
    <version>1.0-SNAPSHOT
    </version>       <!-- указываем номер версии нашей сборки (SNAPSHOT-добавляется если это не окончательный вар. сборки и будет еще меняться)-->
    <name>Calories Management</name> <!-- название проекта (не нужно программисту), для стороннего человека-->
    <url>http://topjava.herokuapp.com/</url> <!-- сайт проекта-->

    <properties>                                               <!-- свойства (пока скопировал из нашего примера)-->
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring.version>4.3.4.RELEASE</spring.version>        <!-- Logging -->
        <logback.version>1.1.7</logback.version>
        <slf4j.version>1.7.21</slf4j.version>
    </properties>

    <!--Тэг <build> не обязательный, т. к. существуют значения по умолчанию. Этот раздел содержит информацию по самой сборке:     где находятся исходные файлы, где ресурсы, какие плагины используются. Например:-->

    <build>
        <finalName>first</finalName>
        <defaultGoal>package</defaultGoal>
        <sourceDirectory>src/main/java
        </sourceDirectory> <!--определяет, откуда maven будет брать файлы исходного кода         (по умолчанию это src/main/java)-->        <!--<resources>         и вложенные в неё тэги <resource> определяют, одну или несколько директорий, где хранятся файлы ресурсов. Ресурсы в отличие от файлов исходного кода при сборке         просто копируются . Директория по умолчанию src/main/resources-->        <!--<outputDirectory>        определяет, в какую директорию компилятор будет сохранять результаты компиляции - *.class файлы.        Значение по умолчанию - target/classes-->        <!--<finalName>        - имя результирующего jar (war, ear..) файла с соответствующим типу расширением, который создаётся на фазе package.        Значение по умолчанию — artifactId-version-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--Зависимости - следующая очень важная часть pom.xml - тут хранится список всех библиотек    (зависимостей) которые используюся в проекте. Каждая библиотека идентифицируется также как и сам проект -    тройкой groupId, artifactId, version (GAV). Объявление зависимостей заключено в тэг <dependencies>...</dependencies>.    при описании зависимости может присутствовать тэг <scope>. Scope задаёт, для чего библиотека используется.-->

    <dependencies>

        <!-- Logging with SLF4J & LogBack -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--Web-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
    </dependencies>
    <profiles></profiles>
    <dependencyManagement></dependencyManagement>
</project>